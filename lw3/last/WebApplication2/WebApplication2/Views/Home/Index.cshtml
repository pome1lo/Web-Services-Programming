<!DOCTYPE html>
<html data-bs-theme="dark">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>index</title>
    <meta charset="utf-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="../Scripts/jquery-3.4.1.js"></script>
    <link rel="stylesheet" href="~/Content/font-awesome.min.css" />
    <link rel="stylesheet" type="text/css" href="../Content/Site.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLR5Iw5zF0jf0k5ZZCBHE5tj5CZW/e2KNU+fvHq9K5" crossorigin="anonymous">
    <style>

        .container-fluid {
            display: flex;
            justify-content: space-between;
            max-width: 1200px;
            margin: 0 auto;
        }

        /*.container-left,
        .container-right {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }*/

        /* Radio Button Styling */
        /*.form-check-label {
            font-weight: 600;
            color: #34495e;
        }*/

        /* Heading */
        /*h2 {
            color: #2c3e50;
            font-weight: 700;
            margin-bottom: 20px;
        }*/

        /* Input Fields */
        /*.input-group {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .input-group input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            outline: none;
            transition: border-color 0.3s;
        }

        .input-group input:focus {
            border-color: #3498db;
        }

        .input-group span {
            margin-right: 10px;
            color: #7f8c8d;
        }*/

        /* Error Messages */
        .error-message {
            color: red;
            font-size: 0.875rem;
            margin-top: -10px;
            margin-bottom: 10px;
        }

        /* Add Student Form */
        /*form {
            margin-top: 30px;
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
        }

        legend {
            color: #2c3e50;
            font-weight: bold;
            font-size: 1.2rem;
        }

        .form-group label {
            flex-shrink: 0;
            font-weight: 600;
            color: #34495e;
        }

        .form-input-width {
            flex-grow: 1;
        }

        .form-group input {
            border-radius: 4px;
            border: 1px solid #ccc;
            padding: 8px;
        }

        button#submitButton {
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 16px;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s;
        }

        button#submitButton:hover {
            background-color: #2980b9;
        }*/

        /* Table Styling */
        /*table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        table th,
        table td {
            border: 1px solid #ccc;
            padding: 12px;
            text-align: left;
        }

        table th {
            background-color: #34495e;
            color: white;
        }

        table td {
            background-color: #f9f9f9;
        }*/

        /* Pagination Buttons */
        /*#prev,
        #next {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            margin-right: 10px;
            cursor: pointer;
        }*/
        #errorLink {
            visibility:hidden
        }
        /*#prev:hover,
        #next:hover {
            background-color: #2980b9;
        }*/

        /* Responsive Design */
        /*media (max-width: 768px) {
            .container-fluid {
                flex-direction: column;
            }

            .container-left,
            .container-right {
                width: 100%;
                margin-bottom: 20px;
            }
        }*/
    </style>
</head>
<body>
    <div class="container-fluid">
        <!-- Левая часть экрана -->
        <div class="container-left">
            <div class="row justify-content-center">
                <div class="">

                    <!-- Радио кнопки -->
                    <div class="row justify-content-center mt-2 mb-2">
                        <div class="not-col-3 mr-4">:</div>
                        <div class="not-col-9">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="format" id="jsonFormat" value="json" checked>
                                <label class="form-check-label" for="jsonFormat">JSON</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="format" id="xmlFormat" value="xml">
                                <label class="form-check-label" for="xmlFormat">XML</label>
                            </div>
                        </div>
                    </div>


                    <!--<div class="input-group mb-2">
                        <p class="mr-3">Sort:</p>
                        <div class=" custom-min-width align-items-center justify-content-center">
                            <input class="custom-checkbox mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                        </div>-->
                        @*<input type="text" id="sort" class="form-control" aria-label="Sort by NAME" readonly value="Sort by name">*@
                    <!--</div>-->

                    <div id="error-offset" style="color: red;"></div>
                    <div class="input-group mb-2" title="Смещение в списке для постраничного вывода">
                        <span class="mr-3" id="labelOffset">Offset</span>
                        <input type="text" id="offset" class="form-control" aria-label="Offset in the list for pagination" aria-describedby="labelOffset">
                    </div>

                    <div id="error-limit" style="color: red;"></div>
                    <div class="input-group mb-2" title="Максимальное количество, возвращаемых элементов списка">
                        <span class="mr-4" id="labelLimit">Limit</span>
                        <input type="text" id="limit" class="form-control" aria-label="Maximum number of list elements returned" aria-describedby="labelLimit">
                    </div>

                    <div id="error-minid" style="color: red;"></div>
                    <div class="input-group mb-2" title="Минимальный идентификатор">
                        <span class="mr-3" id="labelMinId">MinId</span>
                        <input type="text" id="minid" class="form-control" aria-label="Minimal id" aria-describedby="labelMinId">
                    </div>

                    <div id="error-maxid" style="color: red;"></div>
                    <div class="input-group mb-2" title="Максимальный идентификатор">
                        <span class="mr-3" id="labelMaxId">MaxId</span>
                        <input type="text" id="maxid" class="form-control" aria-label="Maximal id" aria-describedby="labelMaxId">
                    </div>

                    <div class="input-group mb-2" title="Шаблон по полю NAME">
                        <span class="mr-4" id="labelLike">Like</span>
                        <input type="text" id="like" class="form-control" aria-label="Pattern by NAME field" aria-describedby="labelLike">
                    </div>

                    <div class="input-group mb-2" title="Шаблон для строк с конкатенации ID, NAME, PHONE">
                        <span class="mr-3" id="labelGlobalLike">GlobalLike</span>
                        <input type="text" id="global_like" class="form-control" aria-label="Pattern for strings with ID, NAME, PHONE concatenation" aria-describedby="labelGlobalLike">
                    </div>

                    <div class="input-group mb-2" title="Параметр для указания полей элементов выводимого списка (id, name, phone)">
                        <span class="mr-4" id="labelColumns">Columns</span>
                        <input type="text" id="columns" class="form-control" aria-label="Parameter for specifying the fields of the elements of the displayed list" aria-describedby="labelColumns">
                    </div>

                    <!-- Форма для добавления студентов -->
                    <div>
                        <form class="mt-5 m-x-auto bg-faded form-width text-center">
                            <legend class="m-b-1 text-xs-center">Add Student</legend>

                            <div class="input-group form-group mb-3">
                                <label for="name-post" class="mr-4">Name</label>
                                <input class="form-control form-input-width" id="name-post" type="text" placeholder="" />

                            </div>
                            <span id="nameError" class="error-message"></span>

                            <div class="input-group form-group mb-3">
                                <label for="phone-post" class="mr-3">Number</label>
                                <input class="form-control form-input-width" id="phone-post" type="text"
                                       pattern="\+375\d{9}" />

                            </div>
                            <span id="phoneError" class="error-message"></span>

                            <div class="text-xs-center">
                                <button type="button" style="padding: 3px 10px 3px 10px" id="submitButton" onclick="">Add</button>
                            </div>

                        </form>
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <a id="errorLink" href="#">ОШИБКА</a>
                            
                        </div>
                    </div>
                    <!-- Правая часть экрана с таблицей и результатами -->
                    <div id="container-right" class="container-right">
                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-12">
                                    <table id="table" class="">
                                        <thead>
                                            <tr id="tableTr">
                                            </tr>
                                        </thead>
                                        <tbody id="tbl"></tbody>
                                    </table>
                                    <div>
                                        <button class=" " id="prev" onClick="getPrevPage()">Prev</button>
                                        <button class=" " id="next" onClick="getNextPage()">Next</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="../Scripts/jquery-3.4.1.js"></script>
    <script src="~/Scripts/inputsValidation.js"></script>
    <script>
        var pagination = 0;
        var prevBtnBlocked = true;

        getStudents();

        async function createStudent(href, method) {
            let data =
            {
                name: $("#name-post").val(),
                phone: $("#phone-post").val()
            }
            var selectedFormat = $('input[name="format"]:checked').val();
            if (selectedFormat === 'xml') {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/xml' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.text();
                    })
                    .then((data) => {
                        console.log(data);
                    });
            }
            else {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((data) => {
                        console.log(data);
                    });
            }
            clearField("name-post");
            clearField("phone-post");
        }

        async function updateStudent(href, method, id) {
            let data = {};

            if (document.getElementById(`${id}Name`)) {
                data.name = document.getElementById(`${id}Name`).value;
            }
            if (document.getElementById(`${id}Phone`)) {
                data.phone = document.getElementById(`${id}Phone`).value;
            }

            var selectedFormat = $('input[name="format"]:checked').val();
            if (selectedFormat === 'xml') {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/xml' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.text();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Update was done", data);
                    });
            }
            else {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Update was done", data);
                    });
            }
        }

        async function deleteStudent(href, method) {
            var selectedFormat = $('input[name="format"]:checked').val();
            if (selectedFormat === 'xml') {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/xml' }
                    })
                    .then((response) => {
                        return response.text();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Delete was done", data);
                    });
            }
            else {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Delete was done", data);
                    });
            }
        }

        async function getNextPage() {
            if ($("#limit").val() != "") {
                var limit = 5;
                var limit = $("#limit").val();
                pagination += parseInt(limit, 10);
                if (pagination - limit >= 0) {
                    prevBtnBlocked = false;
                }
                getStudents();
            }
            else {
                var limit = 5;
                pagination += parseInt(limit, 10);
                if (pagination - limit >= 0) {
                    prevBtnBlocked = false;
                }
                getStudents();
            }
        }



        async function getPrevPage() {
            if ($("#limit").val() != "") {
                var limit = $("#limit").val();
                if (pagination - parseInt(limit, 10) <= 0) {
                    prevBtnBlocked = true;
                }
                if (pagination - parseInt(limit, 10) >= 0) {
                    pagination -= parseInt(limit, 10);
                    getStudents();
                }
            }
            else {
                var limit = 5;
                if (pagination - parseInt(limit, 10) <= 0) {
                    prevBtnBlocked = true;
                }
                if (pagination - parseInt(limit, 10) >= 0) {
                    pagination -= parseInt(limit, 10);
                    getStudents();
                }
            }
        }

        $(document).ready(function () {
            $('.container-left input').on('input', function () {
                if (isVal) {
                    getStudents();
                }
            });
        });


        async function getStudentCount() {
            let data = {};

            // Сбор данных для запроса
            if ($(".custom-checkbox").prop("checked")) data["sort"] = "name";
            else data["sort"] = "id";

            // Убираем лимит и офсет для подсчета общего количества студентов
            if ($("#minid").val() != "") data["minid"] = $("#minid").val();
            if ($("#maxid").val() != "") data["maxid"] = $("#maxid").val();
            if ($("#columns").val() != "") data["columns"] = $("#columns").val();
            if ($("#global_like").val() != "") data["globalLike"] = $("#global_like").val();
            if ($("#like").val() != "") data["like"] = $("#like").val();

            let selectedFormat = $('input[name="format"]:checked').val();
            let url = new URL('/api/student', window.location.href);

            // Убираем лимит и офсет из запроса
            // url.search = new URLSearchParams(data).toString();

            try {
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'multipart/form-data',
                        'Accept': selectedFormat === 'json' ? 'application/json' : 'application/xml'
                    }
                });

                if (!response.ok) {
                    throw new Error('Ошибка при получении данных');
                }

                let totalStudents = 0;
                if (selectedFormat === 'json') {
                    const result = await response.json();
                    totalStudents = result.length; // Предполагается, что API возвращает всех студентов
                } else if (selectedFormat === 'xml') {
                    const result = await response.text();
                    const parser = new DOMParser();
                    const xmlDoc = parser.parseFromString(result, 'application/xml');
                    totalStudents = xmlDoc.getElementsByTagName('student').length; // Предполагается, что API возвращает всех студентов
                }

                return totalStudents;
            } catch (error) {
                console.error('Ошибка:', error);
                return 0;
            }
        }



        async function getStudents() {
            let data = {};

            console.log("getS")
            if ($(".custom-checkbox").prop("checked")) data["sort"] = "name"
            else data["sort"] = "id";
            if ($("#offset").val() != "") data["offset"] = $("#offset").val();
            if ($("#limit").val() != "") data["limit"] = $("#limit").val();
            if ($("#minid").val() != "") data["minid"] = $("#minid").val();
            if ($("#maxid").val() != "") data["maxid"] = $("#maxid").val();
            if ($("#columns").val() != "") data["columns"] = $("#columns").val();
            if ($("#global_like").val() != "") data["globalLike"] = $("#global_like").val();
            if ($("#like").val() != "") data["like"] = $("#like").val();
            data["pagination"] = pagination;

            var selectedFormat = $('input[name="format"]:checked').val();
            var url = new URL('/api/student', window.location.href);

            url.search = new URLSearchParams(data).toString();
            console.log(selectedFormat);
            fetch(url,
                {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'multipart/form-data',
                        'Accept': selectedFormat === 'json' ? 'application/json' : 'application/xml'
                    },
                    data: data
                })
                .then((response) => {
                    console.log(response)
                    if (!response.ok) {
                        response.json().then(data => {

                            console.log(data.Href)
                            const errorLink = document.getElementById('errorLink');
                            errorLink.href = data.Href + `.${selectedFormat}` // Update with the URL you get from the request
                            errorLink.style.visibility = 'visible'; // Make the link visible
                            lins = data.Href;

                        });

                    }
                    else if (selectedFormat === 'json') {
                        return response.json();
                    } else if (selectedFormat === 'xml') {
                        return response.text();
                    } else {
                        return Promise.reject(new Error('Unsupported format: ' + selectedFormat));
                    }
                })

                .then((result) => {
                    let html = "";
                    let i = true;
                    $("#tbl").html('');

                    if (selectedFormat === 'xml') {

                        const parser = new DOMParser();
                        const xmlDoc = parser.parseFromString(result, 'application/xml');

                        var linkElement = xmlDoc.querySelector('AddStudent > link');
                        var hrefValue = linkElement.getAttribute('href');
                        var methodValue = linkElement.getAttribute('method');
                        document.getElementById("submitButton").onclick = function () {
                            createStudent(hrefValue, methodValue);
                        };

                        document.getElementById("next").disabled = $(xmlDoc).find('btnBlock').text() === 'true';
                        document.getElementById("prev").disabled = prevBtnBlocked;

                        $(xmlDoc).find('student').each(function () {

                            var selfLink = $(this).find('link[rel="self"]').attr('href');
                            var updateLink = $(this).find('link[rel="updateRecord"]').attr('href');
                            var deleteLink = $(this).find('link[rel="deleteRecord"]').attr('href');
                            var updateMethod = $(this).find('link[rel="updateRecord"]').attr('method');
                            var deleteMethod = $(this).find('link[rel="deleteRecord"]').attr('method');

                            if (i) {
                                $("#tableTr").html(
                                    ($(this).attr('id') ? '<th scope="col">Id</th>' : '') +
                                    ($(this).attr('name') ? '<th scope="col">Name</th>' : '') +
                                    ($(this).attr('phone') ? '<th scope="col">Phone</th>' : '') +
                                    '<th scope="col" colspan="2"></th>'
                                );
                                i = false;
                            }

                            html +=
                                `<tr xml>` +
                                ($(this).attr('id') ? `<td>${$(this).attr('id')}</td>` : ``) +
                                ($(this).attr('name') ? `<td><input type='text' id='${$(this).attr('id')}Name' value='${$(this).attr('name')}' name="name" /></td>` : ``) +
                                ($(this).attr('phone') ? `<td><input type='text' id='${$(this).attr('id')}Phone' value='${$(this).attr('phone')}' name="phone" /></td>` : ``) +
                                `<td>
                                            <button class="m-1   " onClick='window.location.href="${selfLink}"'>Get</button>` +
                                `<button id="updateButton" class="updateButton m-1   " onClick='updateStudent("${updateLink}", "${updateMethod}", "${$(this).attr("id")}")'>Update</button>` +
                                `<button class="m-1   " onClick='deleteStudent("${deleteLink}", "${deleteMethod}")'>Delete</button>
                                        </td>` +
                                `</tr>`;
                        });
                        $("#tbl").html(html);

                        if ($("#columns").val() === "id") {
                            var updateButtons = document.getElementsByClassName("updateButton");
                            console.log(updateButtons.length)
                            for (var n = 0; n < updateButtons.length; n++) {
                                updateButtons[n].disabled = true;
                                console.log(updateButtons[n].disabled)
                            }
                        } else {
                            $(".updateButton").attr("disabled", false);
                        }
                    }

                    else if (selectedFormat === 'json') {
                        result.forEach((linksObject) => {
                            document.getElementById("next").disabled = linksObject.btnBlock;
                            document.getElementById("prev").disabled = prevBtnBlocked;

                            console.log(linksObject.addStudent.link.href);
                            document.getElementById("submitButton").onclick = function () {
                                createStudent(linksObject.addStudent.link.href, linksObject.addStudent.link.method);
                            };

                            console.log('linksObject.students[0].Id', linksObject.students[0].Id);
                            console.log('linksObject.students[0].Name', linksObject.students[0].Name);
                            console.log('linksObject.students[0].Phone', linksObject.students[0].Phone);

                            if (i) {
                                $("#tableTr").html(
                                    (linksObject.students[0].Id ? '<th scope="col">Id</th>' : '') +
                                    (linksObject.students[0].Name ? '<th scope="col">Name</th>' : '') +
                                    (linksObject.students[0].Phone ? '<th scope="col">Phone</th>' : '') +
                                    '<th scope="col" colspan="2"></th>');
                                i = false;
                            }

                            linksObject.students.forEach((student) => {
                                const linksArray = student.Links;

                                const selfLink = linksArray.find(link => link.rel === "self")?.href;
                                const updateLink = linksArray.find(link => link.rel === "updateRecord")?.href;
                                const deleteLink = linksArray.find(link => link.rel === "deleteRecord")?.href;
                                const updateMethod = linksArray.find(link => link.rel === "updateRecord")?.method;
                                const deleteMethod = linksArray.find(link => link.rel === "deleteRecord")?.method;

                                html +=
                                    `<tr json>` +
                                    (student.Id ? `<td>${student.Id}</td>` : ``) +
                                    (student.Name ? `<td><input type='text' id='${student.Id}Name' value='${student.Name}' name="name" /></td>` : ``) +
                                    (student.Phone ? `<td><input type='text' id='${student.Id}Phone' value='${student.Phone}' name="phone" /></td>` : ``) +
                                    `<td>
                                                  <button class="m-1   " onClick='window.location.href="${selfLink}"'>Get</button>` +
                                    `<button class="m-1   " onClick='updateStudent("${updateLink}", "${updateMethod}", ${student.Id})'>Update</button>` +
                                    `<button class="m-1   " onClick='deleteStudent("${deleteLink}", "${deleteMethod}")'>Delete</button>
                                            </td>` +
                                    `</tr>`;
                            })
                            $("#tbl").html(html);
                        })
                    }
                });
        }

    </script>
    <script src="~/Scripts/formValidation.js"></script>
</body>
</html>
