<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Student Management</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"></script>
    @*<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>*@
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="~/Content/font-awesome.min.css" />
    <link rel="stylesheet" type="text/css" href="../Content/Site.css">
    <style>
        /* Custom Styles */
        body {
            background-color: #f0f4f8;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
        }

        .form-group label {
            font-weight: 600;
            color: #34495e;
        }

        .error-message {
            color: red;
            font-size: 0.875rem;
        }

        #errorLink {
            visibility: hidden;
        }
    </style>
</head>
<body>

    <div class="container">
        <h2 class="text-center mb-4">lw3</h2>

        <div class="row">
            <!-- Left Column -->
            <div class="mb-4 col-md-12">
                <div class="card p-3">
                    <h4>Add</h4>
                    <form id="addStudentForm">
                        <div class="form-group">
                            <label for="name-post">Name</label>
                            <input class="form-control" id="name-post" type="text" placeholder="" />
                            <span id="nameError" class="error-message"></span>
                        </div>

                        <div class="form-group">
                            <label for="phone-post">Number</label>
                            <input class="form-control" id="phone-post" type="text" pattern="\+375\d{9}" />
                            <span id="phoneError" class="error-message"></span>
                        </div>

                        <button type="button" id="submitButton" class="btn btn-primary" onclick="createStudent('/api/students', 'POST')">Add</button>
                    </form>

                    <div class="mt-3 d-flex flex-wrap justify-content-between">
                        <h5>Parameters</h5>
                        <div class="form-group mt-2 w-100">
                            <div class="form-check form-check-inline text-left">
                                <input class="form-check-input" type="radio" name="format" id="jsonFormat" value="json" checked>
                                <label class="form-check-label" for="jsonFormat">JSON</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="format" id="xmlFormat" value="xml">
                                <label class="form-check-label" for="xmlFormat">XML</label>
                            </div>
                        </div>

                        <div class="form-group mt-2">
                            <label for="offset">Offset</label>
                            <input type="text" id="offset" class="form-control" placeholder="Enter offset" />
                            <div id="error-offset" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label for="limit">Limit</label>
                            <input type="text" id="limit" class="form-control" placeholder="Enter limit" />
                            <div id="error-limit" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label for="minid">MinId</label>
                            <input type="text" id="minid" class="form-control" placeholder="Enter min ID" />
                            <div id="error-minid" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label for="maxid">MaxId</label>
                            <input type="text" id="maxid" class="form-control" placeholder="Enter max ID" />
                            <div id="error-maxid" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label for="like">Like</label>
                            <input type="text" id="like" class="form-control" placeholder="Enter pattern" />
                        </div>

                        <div class="form-group">
                            <label for="global_like">GlobalLike</label>
                            <input type="text" id="global_like" class="form-control" placeholder="Enter global pattern" />
                        </div>

                        <div class="form-group">
                            <label for="columns">Columns</label>
                            <input type="text" id="columns" class="form-control" placeholder="Enter fields (id, name, phone)" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-md-12">
                <div class="card p-3"> 
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Phone</th>
                                <th>Buttons</th>
                            </tr>
                        </thead>
                        <tbody id="tbl"></tbody>
                    </table>
                    <div>
                        <button class="btn btn-secondary" id="prev" onClick="getPrevPage()">Prev</button>
                        <button class="btn btn-secondary" id="next" onClick="getNextPage()">Next</button>
                    </div>
                    <a id="errorLink" href="#">Error occurred, click here for more info</a>
                </div>
            </div>
        </div>
    </div>


    <script src="~/Scripts/inputsValidation.js"></script>
    <script>
        var pagination = 0;
        var prevBtnBlocked = true;

        getStudents();

        async function createStudent(href, method) {
            let data =
            {
                name: $("#name-post").val(),
                phone: $("#phone-post").val()
            }
            var selectedFormat = $('input[name="format"]:checked').val();
            if (selectedFormat === 'xml') {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/xml' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.text();
                    })
                    .then((data) => {
                        console.log(data);
                    });
            }
            else {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((data) => {
                        console.log(data);
                    });
            }
            clearField("name-post");
            clearField("phone-post");
        }

        async function updateStudent(href, method, id) {
            let data = {};

            if (document.getElementById(`${id}Name`)) {
                data.name = document.getElementById(`${id}Name`).value;
            }
            if (document.getElementById(`${id}Phone`)) {
                data.phone = document.getElementById(`${id}Phone`).value;
            }

            var selectedFormat = $('input[name="format"]:checked').val();
            if (selectedFormat === 'xml') {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/xml' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.text();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Update was done", data);
                    });
            }
            else {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Update was done", data);
                    });
            }
        }

        async function deleteStudent(href, method) {
            var selectedFormat = $('input[name="format"]:checked').val();
            if (selectedFormat === 'xml') {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/xml' }
                    })
                    .then((response) => {
                        return response.text();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Delete was done", data);
                    });
            }
            else {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Delete was done", data);
                    });
            }
        }

        async function getNextPage() {
            if ($("#limit").val() != "") {
                var limit = 5;
                var limit = $("#limit").val();
                pagination += parseInt(limit, 10);
                if (pagination - limit >= 0) {
                    prevBtnBlocked = false;
                }
                getStudents();
            }
            else {
                var limit = 5;
                pagination += parseInt(limit, 10);
                if (pagination - limit >= 0) {
                    prevBtnBlocked = false;
                }
                getStudents();
            }
        }

        async function getPrevPage() {
            if ($("#limit").val() != "") {
                var limit = $("#limit").val();
                if (pagination - parseInt(limit, 10) <= 0) {
                    prevBtnBlocked = true;
                }
                if (pagination - parseInt(limit, 10) >= 0) {
                    pagination -= parseInt(limit, 10);
                    getStudents();
                }
            }
            else {
                var limit = 5;
                if (pagination - parseInt(limit, 10) <= 0) {
                    prevBtnBlocked = true;
                }
                if (pagination - parseInt(limit, 10) >= 0) {
                    pagination -= parseInt(limit, 10);
                    getStudents();
                }
            }
        }

        $(document).ready(function () {
            $('.container-left input').on('input', function () {
                if (isVal) {
                    getStudents();
                }
            });
        });






        async function getStudents() {
            let data = {};

            console.log("getS")
            if ($(".custom-checkbox").prop("checked")) data["sort"] = "name"
            else data["sort"] = "id";
            if ($("#offset").val() != "") data["offset"] = $("#offset").val();
            if ($("#limit").val() != "") data["limit"] = $("#limit").val();
            if ($("#minid").val() != "") data["minid"] = $("#minid").val();
            if ($("#maxid").val() != "") data["maxid"] = $("#maxid").val();
            if ($("#columns").val() != "") data["columns"] = $("#columns").val();
            if ($("#global_like").val() != "") data["globalLike"] = $("#global_like").val();
            if ($("#like").val() != "") data["like"] = $("#like").val();
            data["pagination"] = pagination;

            var selectedFormat = $('input[name="format"]:checked').val();
            var url = new URL('/api/student', window.location.href);

            url.search = new URLSearchParams(data).toString();
            console.log(selectedFormat);
            fetch(url,
                {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'multipart/form-data',
                        'Accept': selectedFormat === 'json' ? 'application/json' : 'application/xml'
                    },
                    data: data
                })
                .then((response) => {
                    console.log(response)
                    if (!response.ok) {
                        response.json().then(data => {

                            console.log(data.Href)
                            const errorLink = document.getElementById('errorLink');
                            errorLink.href = data.Href + `/${selectedFormat}` // Update with the URL you get from the request
                            errorLink.style.visibility = 'visible'; // Make the link visible
                            lins = data.Href;

                        });

                    }
                    else if (selectedFormat === 'json') {
                        return response.json();
                    } else if (selectedFormat === 'xml') {
                        return response.text();
                    } else {
                        return Promise.reject(new Error('Unsupported format: ' + selectedFormat));
                    }
                })

                .then((result) => {
                    let html = "";
                    let i = true;
                    $("#tbl").html('');

                    if (selectedFormat === 'xml') {

                        const parser = new DOMParser();
                        const xmlDoc = parser.parseFromString(result, 'application/xml');

                        var linkElement = xmlDoc.querySelector('AddStudent > link');
                        var hrefValue = linkElement.getAttribute('href');
                        var methodValue = linkElement.getAttribute('method');
                        document.getElementById("submitButton").onclick = function () {
                            createStudent(hrefValue, methodValue);
                        };

                        document.getElementById("next").disabled = $(xmlDoc).find('btnBlock').text() === 'true';
                        document.getElementById("prev").disabled = prevBtnBlocked;

                        $(xmlDoc).find('student').each(function () {

                            var selfLink = $(this).find('link[rel="self"]').attr('href');
                            var updateLink = $(this).find('link[rel="updateRecord"]').attr('href');
                            var deleteLink = $(this).find('link[rel="deleteRecord"]').attr('href');
                            var updateMethod = $(this).find('link[rel="updateRecord"]').attr('method');
                            var deleteMethod = $(this).find('link[rel="deleteRecord"]').attr('method');

                            if (i) {
                                $("#tableTr").html(
                                    ($(this).attr('id') ? '<th scope="col">Id</th>' : '') +
                                    ($(this).attr('name') ? '<th scope="col">Name</th>' : '') +
                                    ($(this).attr('phone') ? '<th scope="col">Phone</th>' : '') +
                                    '<th scope="col" colspan="2"></th>'
                                );
                                i = false;
                            }

                            html +=
                                `<tr xml>` +
                                ($(this).attr('id') ? `<td>${$(this).attr('id')}</td>` : ``) +
                                ($(this).attr('name') ? `<td><input type='text' id='${$(this).attr('id')}Name' value='${$(this).attr('name')}' name="name" /></td>` : ``) +
                                ($(this).attr('phone') ? `<td><input type='text' id='${$(this).attr('id')}Phone' value='${$(this).attr('phone')}' name="phone" /></td>` : ``) +
                                `<td>
                                        <button class="m-1   " onClick='window.location.href="${selfLink}"'>Get</button>` +
                                `<button id="updateButton" class="updateButton btn btn-warning m-1   " onClick='updateStudent("${updateLink}", "${updateMethod}", "${$(this).attr("id")}")'>Update</button>` +
                                `<button class="m-1   " onClick='deleteStudent("${deleteLink}", "${deleteMethod}")'>Delete</button>
                                    </td>` +
                                `</tr>`;
                        });
                        $("#tbl").html(html);

                        if ($("#columns").val() === "id") {
                            var updateButtons = document.getElementsByClassName("updateButton");
                            console.log(updateButtons.length)
                            for (var n = 0; n < updateButtons.length; n++) {
                                updateButtons[n].disabled = true;
                                console.log(updateButtons[n].disabled)
                            }
                        } else {
                            $(".updateButton").attr("disabled", false);
                        }
                    }

                    else if (selectedFormat === 'json') {
                        result.forEach((linksObject) => {
                            document.getElementById("next").disabled = linksObject.btnBlock;
                            document.getElementById("prev").disabled = prevBtnBlocked;

                            console.log(linksObject.addStudent.link.href);
                            document.getElementById("submitButton").onclick = function () {
                                createStudent(linksObject.addStudent.link.href, linksObject.addStudent.link.method);
                            };

                            console.log('linksObject.students[0].Id', linksObject.students[0].Id);
                            console.log('linksObject.students[0].Name', linksObject.students[0].Name);
                            console.log('linksObject.students[0].Phone', linksObject.students[0].Phone);

                            if (i) {
                                $("#tableTr").html(
                                    (linksObject.students[0].Id ? '<th scope="col">Id</th>' : '') +
                                    (linksObject.students[0].Name ? '<th scope="col">Name</th>' : '') +
                                    (linksObject.students[0].Phone ? '<th scope="col">Phone</th>' : '') +
                                    '<th scope="col" colspan="2"></th>');
                                i = false;
                            }

                            linksObject.students.forEach((student) => {
                                const linksArray = student.Links;

                                const selfLink = linksArray.find(link => link.rel === "self")?.href;
                                const updateLink = linksArray.find(link => link.rel === "updateRecord")?.href;
                                const deleteLink = linksArray.find(link => link.rel === "deleteRecord")?.href;
                                const updateMethod = linksArray.find(link => link.rel === "updateRecord")?.method;
                                const deleteMethod = linksArray.find(link => link.rel === "deleteRecord")?.method;

                                html +=
                                    `<tr json>` +
                                    (student.Id ? `<td>${student.Id}</td>` : ``) +
                                    (student.Name ? `<td><input type='text' id='${student.Id}Name' value='${student.Name}' name="name" /></td>` : ``) +
                                    (student.Phone ? `<td><input type='text' id='${student.Id}Phone' value='${student.Phone}' name="phone" /></td>` : ``) +
                                    `<td>
                                              <button class="m-1 btn btn-success  " onClick='window.location.href="${selfLink}"'>Get</button>` +
                                    `<button class="m-1 btn btn-warning   " onClick='updateStudent("${updateLink}", "${updateMethod}", ${student.Id})'>Update</button>` +
                                    `<button class="m-1 btn btn-danger"  " onClick='deleteStudent("${deleteLink}", "${deleteMethod}")'>Delete</button>
                                        </td>` +
                                    `</tr>`;
                            })
                            $("#tbl").html(html);
                        })
                    }
                });
        }

    </script>
    <script src="~/Scripts/formValidation.js"></script>
</body>
</html>
